import random

# Initialize the Tic Tac Toe board
board = [' ' for _ in range(9)]

def print_board(board):
    """Prints the current Tic Tac Toe board."""
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')
        print('-------------')

def available_moves(board):
    """Returns a list of indices of empty squares on the board."""
    return [i for i, spot in enumerate(board) if spot == ' ']

def check_winner(board, player):
    """Checks if the player has won the game."""
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # columns
        [0, 4, 8], [2, 4, 6]             # diagonals
    ]
    for combo in win_combinations:
        if all(board[i] == player for i in combo):
            return True
    return False

def player_move():
    """Handles the player's move."""
    move = None
    legal_moves = available_moves(board)
    while move not in legal_moves:
        try:
            move = int(input("Enter your move (0-8): "))
            if move not in legal_moves:
                print("That move is not valid. Try again.")
        except ValueError:
            print("Please enter a number.")
    return move

def ai_move():
    """Handles the AI's move using minimax algorithm."""
    if len(available_moves(board)) == 9:
        return random.choice([0, 2, 6, 8])  # Start with a corner for variation

    best_score = -float('inf')
    best_move = None

    for move in available_moves(board):
        board[move] = 'O'
        score = minimax(board, False)
        board[move] = ' '

        if score > best_score:
            best_score = score
            best_move = move

    return best_move

def minimax(board, is_maximizing):
    """Minimax algorithm implementation."""
    if check_winner(board, 'O'):
        return 1
    elif check_winner(board, 'X'):
        return -1
    elif len(available_moves(board)) == 0:
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for move in available_moves(board):
            board[move] = 'O'
            score = minimax(board, False)
            board[move] = ' '
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for move in available_moves(board):
            board[move] = 'X'
            score = minimax(board, True)
            board[move] = ' '
            best_score = min(score, best_score)
        return best_score

def main():
    """Main game loop."""
    print("Welcome to Tic Tac Toe!")
    print_board(board)

    while True:
        # Player's turn
        player_move_idx = player_move()
        board[player_move_idx] = 'X'
        print_board(board)
        if check_winner(board, 'X'):
            print("Congratulations! You won!")
            break
        if len(available_moves(board)) == 0:
            print("It's a tie!")
            break

        # AI's turn
        ai_move_idx = ai_move()
        board[ai_move_idx] = 'O'
        print("AI plays:")
        print_board(board)
        if check_winner(board, 'O'):
            print("AI wins! Better luck next time.")
            break
        if len(available_moves(board)) == 0:
            print("It's a tie!")
            break

if __name__ == '__main__':
    main()
